import os # Import necessary libraries
import logging # Import logging for debugging and information
import asyncio # Import asyncio for asynchronous operations
import tempfile # Import tempfile for temporary file handling
import shutil # Import shutil for file operations
import json # Import json for handling JSON data
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand # Import necessary Telegram bot components 
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler # Import necessary Telegram bot handlers
from dotenv import load_dotenv # Import dotenv for environment variable management 
import yt_dlp # Import yt-dlp for downloading media

# Load environment variables from .env file
load_dotenv()

# Logging setup
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("Cant found TELEGRAM_BOT_TOKEN in environment variables.")

# Paths and variables
cookies_path = os.getenv('COOKIES_PATH', 'youtube.com_cookies.txt')
ffmpeg_path_from_env = os.getenv('FFMPEG_PATH')
ffmpeg_path = ffmpeg_path_from_env if ffmpeg_path_from_env else '/usr/bin/ffmpeg'   # Default path for ffmpeg
FFMPEG_IS_AVAILABLE = os.path.exists(ffmpeg_path) and os.access(ffmpeg_path, os.X_OK)   # Check if ffmpeg is available
REQUIRED_CHANNEL = os.getenv("REQUIRED_CHANNEL", "@ytdlpdeveloper")    # Channel to which users must be subscribed
TELEGRAM_FILE_SIZE_LIMIT_BYTES = 50 * 1024 * 1024 # 50 MB in bytes
TELEGRAM_FILE_SIZE_LIMIT_TEXT = "50 –ú–ë" # Text representation of the file size limit 
# File to store user language preferences
USER_LANGS_FILE = "user_languages.json" # File to store user language preferences
# Keyboard for language selection # This keyboard will be shown to users when they start the bot or change language 
LANG_KEYBOARD = ReplyKeyboardMarkup( # Keyboard for selecting language
    [
        ["–†—É—Å—Å–∫–∏–π", "English"], # Russian and English
        ["Espa√±ol", "Az…ôrbaycan dili"], # Spanish and Azerbaijani
        ["T√ºrk√ße", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"], # Turkish and Ukrainian
        ["ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"] # Arabic
    ], 
    resize_keyboard=True, # Resize keyboard buttons
    one_time_keyboard=True # Hide keyboard after selection
)
# Mapping language names to codes
LANG_CODES = {
    "–†—É—Å—Å–∫–∏–π": "ru", "English": "en", "Espa√±ol": "es", # Spanish
    "Az…ôrbaycan dili": "az", "T√ºrk√ße": "tr", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk", # Ukrainian
    "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©": "ar" # Arabic
}

SEARCH_RESULTS_LIMIT = 10 # Search results limit
user_langs = {} # Dictionary for storing user language preferences

# Dictionaries with localized texts
LANGUAGES = {
    "ru": {
        "start": (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Å YouTube –∏ SoundCloud.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ SoundCloud (–≤–∏–¥–µ–æ –∏–ª–∏ —Ç—Ä–µ–∫), –∏ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ.\n\n" # Instructions for using the bot
            f"–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {REQUIRED_CHANNEL}.\n" # Welcome message
            "\nüéµ –¢–∞–∫–∂–µ —è —É–º–µ—é –∏—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /search –∏ –Ω–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫.\n" # Search command
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! " # Welcome message
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @ytdlpdeveloper. artoflife2303.github.io/miniblog " # Blog link
            "–í–µ–± –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: youtubemusicdownloader.life, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ bit.ly/ytmusicload" # Web version of the bot
        ),
        "choose_lang": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", # Language selection prompt
        "not_subscribed": f"–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {REQUIRED_CHANNEL} –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", # Subscription check message
        "checking": "–ü—Ä–æ–≤–µ—Ä—è—é —Å—Å—ã–ª–∫—É...", # Checking link message
        "not_youtube": "–≠—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ SoundCloud.", # Not supported link message
        "choose_download_type": "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ:", # Download format selection prompt
        "audio_button_mp3": "üéµ MP3 (YouTube)", 
        "audio_button_sc": "üéµ MP3 (SoundCloud)", 
        "downloading_audio": "–°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ... –ü–æ–¥–æ–∂–¥–∏—Ç–µ.", # Downloading audio message
        "download_progress": "–°–∫–∞—á–∏–≤–∞—é: {percent} –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {speed}, –æ—Å—Ç–∞–ª–æ—Å—å ~{eta}", # Download progress message
        "too_big": f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>{TELEGRAM_FILE_SIZE_LIMIT_TEXT}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ —Ç—Ä–µ–∫.", # File size limit message
        "done_audio": "–ì–æ—Ç–æ–≤–æ! –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
        "error": "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!\n", # Error message
        "error_private_video": "–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–∞—á–∞–Ω–æ.", # Private video error message
        "error_video_unavailable": "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", # Video unavailable error message
        "sending_file": "–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª {index} –∏–∑ {total}...", # Sending file message
        "cancel_button": "–û—Ç–º–µ–Ω–∞", # Cancel button text
        "cancelling": "–û—Ç–º–µ–Ω—è—é –∑–∞–≥—Ä—É–∑–∫—É...", # Cancel download message
        "cancelled": "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", # Download cancelled message
        "download_in_progress": "–î—Ä—É–≥–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë.", # Download in progress message
        "already_cancelled_or_done": "–ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", # Already cancelled or done message
        "url_error_generic": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å URL. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube –∏–ª–∏ SoundCloud.", # URL error message
        "search_prompt": ( 
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –ü–æ—Å–ª–µ —á–µ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º—É–∑—ã–∫—É, –æ–Ω–∞ –∑–∞–≥—Ä–∑–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3.\n"
            "–í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞.\n"
            "–í–≤–µ–¥–∏—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (YouTube)."
        ),
        "searching": "–ò—â—É –º—É–∑—ã–∫—É...", # Search in progress message
        "unsupported_url_in_search": "–°—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.(–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ, –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ Remix)",
        "no_results": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", # No results found message
        "choose_track": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è MP3:", # Track selection prompt
        "downloading_selected_track": "–°–∫–∞—á–∏–≤–∞—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫ –≤ MP3...", # Downloading selected track message
        "copyright_pre": "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π –≤–∞–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—â–∏—â—ë–Ω –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π. –ï—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –Ω–∞—Ä—É—à–µ–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ copyrightytdlpbot@gmail.com –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞.",
        "copyright_post": "‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—â–∏—â—ë–Ω –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π. –ï—Å–ª–∏ –≤—ã –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –Ω–∞—Ä—É—à–µ–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ copyrightytdlpbot@gmail.com.",
        "copyright_command": "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å–∫–∞—á–∏–≤–∞–µ–º—ã–µ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π. –ï—Å–ª–∏ –≤—ã –ø—Ä–∞–≤–æ–æ–±–ª–∞–¥–∞—Ç–µ–ª—å –∏ —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –≤–∞—à–∏ –ø—Ä–∞–≤–∞ –Ω–∞—Ä—É—à–µ–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ copyrightytdlpbot@gmail.com, –∏ –º—ã —É–¥–∞–ª–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç."
    },
    "en": {
        "start": (
            "Hello! I am a bot for downloading audio from YouTube and SoundCloud. # Welcome message"
            "Send a YouTube or SoundCloud link (video or track), and I will offer you audio download options."
            f"To use the bot, please subscribe to the channel {REQUIRED_CHANNEL}."
            "\nüéµ I can also search for music by name! Just type /search and find your track."
            "Enjoy!" # Instructions for using the bot
            "Don't forget to subscribe to the channel for updates and support @ytdlpdeveloper. artoflife2303.github.io/miniblog. " # Blog link
            "Web version of the bot: youtubemusicdownloader.life, if it doesn't work then bit.ly/ytmusicload" # Web version link
        ),
        "choose_lang": "Choose language:",
        "not_subscribed": f"To use the bot, please subscribe to {REQUIRED_CHANNEL} and try again.",
        "checking": "Checking link...",
        "not_youtube": "This is not a supported link. Please send a valid YouTube or SoundCloud link.",
        "choose_download_type": "Choose audio format:",
        "audio_button_mp3": "üéµ MP3 (YouTube)",
        "audio_button_sc": "üéµ MP3 (SoundCloud)",
        "downloading_audio": "Downloading audio... Please wait.",
        "download_progress": "Downloading: {percent} at {speed}, ETA ~{eta}",
        "too_big": f"File is too large (>{TELEGRAM_FILE_SIZE_LIMIT_TEXT}). Try another video or track.",
        "done_audio": "Done! Audio sent.",
        "error": "Something went wrong. Check the link or try again!",
        "error_private_video": "This is a private video and cannot be downloaded.",
        "error_video_unavailable": "Video unavailable.",
        "sending_file": "Sending file {index} of {total}...",
        "cancel_button": "Cancel",
        "cancelling": "Cancelling download...",
        "cancelled": "Download cancelled.",
        "download_in_progress": "Another download is already in progress. Please wait or cancel it.",
        "already_cancelled_or_done": "Download already cancelled or completed.",
        "url_error_generic": "Failed to process URL. Make sure it's a valid YouTube or SoundCloud link.",
        "search_prompt": (
            "Enter the track name or artist. Then click on the music, it will download in MP3 format."
            "Enter /cancel to cancel the search."
            "Enter /search to search for music by name (YouTube)."
        ),
        "searching": "Searching for music...",
        "unsupported_url_in_search": "The link is not supported. Please check the link or try another query. (Alternatively, if it didn't work, you can download a track from another artist or Remix)",
        "no_results": "Nothing found. Try another query.",
        "choose_track": "Select a track to download in MP3:",
        "downloading_selected_track": "Downloading the selected track in MP3...",
        "copyright_pre": "‚ö†Ô∏è Warning! The material you are about to download may be protected by copyright. Use for personal purposes only. If you are a copyright holder and believe your rights are being violated, please contact copyrightytdlpbot@gmail.com for removal.",
        "copyright_post": "‚ö†Ô∏è This material may be protected by copyright. Use for personal purposes only. If you are a copyright holder and believe your rights are being violated, contact copyrightytdlpbot@gmail.com.",
        "copyright_command": "‚ö†Ô∏è Warning! All materials downloaded via this bot may be protected by copyright. Use for personal purposes only. If you are a copyright holder and believe your rights are being violated, contact copyrightytdlpbot@gmail.com and we will remove the content."
    },
    "es": {
        "start": (
            "¬°Hola! Soy un bot para descargar audio de YouTube y SoundCloud."
            "Env√≠ame un enlace de YouTube o SoundCloud (video o pista) y te ofrecer√© opciones para descargar el audio."
            f"Para usar el bot, suscr√≠bete al canal {REQUIRED_CHANNEL}."
            "\nüéµ ¬°Tambi√©n puedo buscar m√∫sica por nombre! Escribe /search y encuentra tu pista."
            "¬°Disfruta!"
            "No olvides suscribirte al canal para actualizaciones y soporte @ytdlpdeveloper. artoflife2303.github.io/miniblog. "
            "Versi√≥n web del bot: youtubemusicdownloader.life, si no funciona entonces bit.ly/ytmusicload"
        ),
        "choose_lang": "Elige idioma:",
        "not_subscribed": f"Para usar el bot, suscr√≠bete al canal {REQUIRED_CHANNEL} y vuelve a intentarlo.",
        "checking": "Verificando enlace...",
        "not_youtube": "Este enlace no es compatible. Por favor, env√≠a un enlace v√°lido de YouTube o SoundCloud.",
        "choose_download_type": "Elige el formato de audio:",
        "audio_button_mp3": "üéµ MP3 (YouTube)",
        "audio_button_sc": "üéµ MP3 (SoundCloud)",
        "downloading_audio": "Descargando audio... Por favor espera.",
        "download_progress": "Descargando: {percent} a {speed}, queda ~{eta}",
        "too_big": f"El archivo es demasiado grande (>{TELEGRAM_FILE_SIZE_LIMIT_TEXT}). Prueba con otro video o pista.",
        "done_audio": "¬°Listo! Audio enviado.",
        "error": "¬°Algo sali√≥ mal! Verifica el enlace o int√©ntalo de nuevo.",
        "error_private_video": "Este es un video privado y no puede ser descargado.",
        "error_video_unavailable": "Video no disponible.",
        "sending_file": "Enviando archivo {index} de {total}...",
        "cancel_button": "Cancelar",
        "cancelling": "Cancelando descarga...",
        "cancelled": "Descarga cancelada.",
        "download_in_progress": "Otra descarga ya est√° en progreso. Por favor espera o canc√©lala.",
        "already_cancelled_or_done": "La descarga ya fue cancelada o completada.",
        "url_error_generic": "No se pudo procesar la URL. Aseg√∫rate de que sea un enlace v√°lido de YouTube o SoundCloud.",
        "search_prompt": (
            "Ingrese el nombre de la pista o artista. Luego haga clic en la m√∫sica, se descargar√° en formato MP3."
            "Ingrese /cancel para cancelar la b√∫squeda."
            "Ingrese /search para buscar m√∫sica por nombre (YouTube)."
        ),
        "searching": "Buscando m√∫sica...",
        "unsupported_url_in_search": "El enlace no es compatible. Por favor, compruebe el enlace o pruebe con otra consulta. (Alternativamente, si no funcion√≥, puede descargar una pista de otro artista o un Remix)",
        "no_results": "No se encontraron resultados. Intente con otra consulta.",
        "choose_track": "Seleccione una pista para descargar en MP3:",
        "downloading_selected_track": "Descargando la pista seleccionada en MP3...",
        "copyright_pre": "‚ö†Ô∏è ¬°Atenci√≥n! El material que est√° a punto de descargar puede estar protegido por derechos de autor. √öselo solo para fines personales. Si es titular de derechos y cree que se est√°n violando sus derechos, escriba a copyrightytdlpbot@gmail.com para eliminar el contenido.",
        "copyright_post": "‚ö†Ô∏è Este material puede estar protegido por derechos de autor. √öselo solo para fines personales. Si es titular de derechos y cree que se est√°n violando sus derechos, escriba a copyrightytdlpbot@gmail.com.",
        "copyright_command": "‚ö†Ô∏è ¬°Atenci√≥n! Todo el material descargado a trav√©s de este bot puede estar protegido por derechos de autor. √öselo solo para fines personales. Si es titular de derechos y cree que se est√°n violando sus derechos, escriba a copyrightytdlpbot@gmail.com y eliminaremos el contenido."
    },
    "tr": {
        "start": (
            "Merhaba! Ben YouTube ve SoundCloud'dan ses indirmek i√ßin bir botum."
            "YouTube veya SoundCloud baƒülantƒ±sƒ± g√∂nderin (video veya par√ßa), size ses indirme se√ßenekleri sunacaƒüƒ±m."
            f"Botu kullanmak i√ßin {REQUIRED_CHANNEL} kanalƒ±na abone olun."
            "\nüéµ Ayrƒ±ca isimle m√ºzik arayabilirim! Sadece /search yazƒ±n ve par√ßanƒ±zƒ± bulun."
            "ƒ∞yi eƒülenceler!"
            "Botu kullanmak i√ßin kanala abone olmayƒ± unutmayƒ±n @ytdlpdeveloper. artoflife2303.github.io/miniblog "
            "Web bot versiyonu: youtubemusicdownloader.life, eƒüer √ßalƒ±≈ümƒ±yorsa hbit.ly/ytmusicload"
        ),
        "choose_lang": "Dil se√ßin:",
        "not_subscribed": f"Botu kullanmak i√ßin l√ºtfen {REQUIRED_CHANNEL} kanalƒ±na abone olun ve tekrar deneyin.",
        "checking": "Baƒülantƒ± kontrol ediliyor...",
        "not_youtube": "Bu desteklenmeyen bir baƒülantƒ±. L√ºtfen ge√ßerli bir YouTube veya SoundCloud baƒülantƒ±sƒ± g√∂nderin.",
        "choose_download_type": "Ses formatƒ± se√ßin:",
        "audio_button_mp3": "üéµ MP3 (YouTube)",
        "audio_button_sc": "üéµ MP3 (SoundCloud)",
        "downloading_audio": "Ses indiriliyor... L√ºtfen bekleyin.",
        "download_progress": "ƒ∞ndiriliyor: {percent} hƒ±zƒ±nda {speed}, kalan ~{eta}",
        "too_big": f"Dosya √ßok b√ºy√ºk (>{TELEGRAM_FILE_SIZE_LIMIT_TEXT}). Ba≈üka bir video veya par√ßa deneyin.",
        "done_audio": "Tamamlandƒ±! Ses g√∂nderildi.",
        "error": "Bir hata olu≈ütu. Baƒülantƒ±yƒ± kontrol edin veya tekrar deneyin!\n",
        "error_private_video": "Bu √∂zel bir video ve indirilemez.",
        "error_video_unavailable": "Video kullanƒ±lamƒ±yor.",
        "sending_file": "{total} dosyadan {index}. g√∂nderiliyor...",
        "cancel_button": "ƒ∞ptal",
        "cancelling": "ƒ∞ndirme iptal ediliyor...",
        "cancelled": "ƒ∞ndirme iptal edildi.",
        "download_in_progress": "Ba≈üka bir indirme zaten devam ediyor. L√ºtfen bekleyin veya iptal edin.",
        "already_cancelled_or_done": "ƒ∞ndirme zaten iptal edildi veya tamamlandƒ±.",
        "url_error_generic": "URL i≈ülenemedi. Ge√ßerli bir YouTube veya SoundCloud baƒülantƒ±sƒ± olduƒüundan emin olun.",
        "search_prompt": (
            "Par√ßa adƒ± veya sanat√ßƒ± adƒ± girin. Ardƒ±ndan m√ºziƒüe tƒ±klayƒ±n, MP3 formatƒ±nda indirilecektir.\n"
            "Aramayƒ± iptal etmek i√ßin /cancel yazƒ±n.\n"
            "M√ºzik adƒ±yla arama yapmak i√ßin /search yazƒ±n (YouTube)."
        ),
        "searching": "M√ºzik aranƒ±yor...",
        "unsupported_url_in_search": "Baƒülantƒ± desteklenmiyor. L√ºtfen baƒülantƒ±yƒ± kontrol edin veya ba≈üka bir sorgu deneyin. (Alternatif olarak, i≈üe yaramadƒ±ysa, ba≈üka bir sanat√ßƒ±dan veya Remix bir par√ßa indirebilirsiniz)",
        "no_results": "Hi√ßbir sonu√ß bulunamadƒ±. Ba≈üka bir sorgu deneyin.",
        "choose_track": "MP3 olarak indirmek i√ßin bir par√ßa se√ßin:",
        "downloading_selected_track": "Se√ßilen par√ßa MP3 olarak indiriliyor...",
        "copyright_pre": "‚ö†Ô∏è Dikkat! ƒ∞ndirmek √ºzr…ô olduƒüunuz materyal telif haqqƒ± il…ô qoruna bil…ôr. Yalnƒ±zca ≈ü…ôxsi istifad…ô √º√ß√ºn istifad…ô edin. ∆èg…ôr siz h√ºquq sahibisiniz v…ô h√ºquqlarƒ±nƒ±zƒ±n pozulduƒüunu d√º≈ü√ºn√ºrs…ôns…ô, z…ôhm…ôt olmasa copyrightytdlpbot@gmail.com √ºnvanƒ±na yazƒ±n.",
        "copyright_post": "‚ö†Ô∏è Bu materyal telif haqqƒ± il…ô qoruna bil…ôr. Yalnƒ±zca ≈ü…ôxsi istifad…ô √º√ß√ºn istifad…ô edin. ∆èg…ôr siz h√ºquq sahibisiniz v…ô h√ºquqlarƒ±nƒ±zƒ±n pozulduƒüunu d√º≈ü√ºn√ºrs…ô, copyrightytdlpbot@gmail.com √ºnvanƒ±na yazƒ±n.",
        "copyright_command": "‚ö†Ô∏è Diqq…ôt! Bu bot vasit…ôsil…ô y√ºkl…ôn…ôn b√ºt√ºn materiallar m√º…ôllif h√ºquqlarƒ± il…ô qoruna bil…ôr. Yalnƒ±zca ≈ü…ôxsi istifad…ô √º√ß√ºn istifad…ô edin. ∆èg…ôr siz h√ºquq sahibisiniz v…ô h√ºquqlarƒ±nƒ±zƒ±n pozulduƒüunu d√º≈ü√ºn√ºrs…ô, copyrightytdlpbot@gmail.com √ºnvanƒ±na yazƒ±n, m√ºvafiq m…ôzmunu sil…ôc…ôyik."
    },
    "ar": {
        "start": (
            "ŸÖÿ±ÿ≠ÿ®Ÿãÿß! ÿ£ŸÜÿß ÿ®Ÿàÿ™ ŸÑÿ™ŸÜÿ≤ŸäŸÑ ÿßŸÑÿµŸàÿ™ ŸÖŸÜ YouTube Ÿà SoundCloud."
            "ÿ£ÿ±ÿ≥ŸÑ ÿ±ÿßÿ®ÿ∑ YouTube ÿ£Ÿà SoundCloud (ŸÅŸäÿØŸäŸà ÿ£Ÿà ŸÖÿ≥ÿßÿ±) Ÿàÿ≥ÿ£ŸÇÿØŸÖ ŸÑŸÉ ÿÆŸäÿßÿ±ÿßÿ™ ÿ™ŸÜÿ≤ŸäŸÑ ÿßŸÑÿµŸàÿ™."
            f"ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ŸÅŸä ÿßŸÑŸÇŸÜÿßÿ© {REQUIRED_CHANNEL}."
            "üéµ ŸäŸÖŸÉŸÜŸÜŸä ÿ£Ÿäÿ∂Ÿãÿß ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ ÿ®ÿßŸÑÿßÿ≥ŸÖ! ŸÖÿß ÿπŸÑŸäŸÉ ÿ≥ŸàŸâ ŸÉÿ™ÿßÿ®ÿ© /search ŸàÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿßŸÑŸÖÿ≥ÿßÿ± ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ."
            "ÿßÿ≥ÿ™ŸÖÿ™ÿπ!"
            "ŸÑÿß ÿ™ŸÜÿ≥ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ŸÅŸä ÿßŸÑŸÇŸÜÿßÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ŸàÿßŸÑÿØÿπŸÖ @ytdlpdeveloper. artoflife2303.github.io/miniblog. "
            "ÿßŸÑŸÜÿ≥ÿÆÿ© ÿßŸÑŸàŸäÿ® ŸÖŸÜ ÿßŸÑÿ®Ÿàÿ™: youtubemusicdownloader.lifeÿå ÿ•ÿ∞ÿß ŸÑŸÖ ÿ™ÿπŸÖŸÑÿå ŸÅÿ¨ÿ±Ÿëÿ® bit.ly/ytmusicload"
        ),
        "choose_lang": "ÿßÿÆÿ™ÿ± ÿßŸÑŸÑÿ∫ÿ©:",
        "not_subscribed": f"ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿ®Ÿàÿ™ÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßÿ¥ÿ™ÿ±ÿßŸÉ ŸÅŸä ŸÇŸÜÿßÿ© {REQUIRED_CHANNEL} ŸàÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.",
        "checking": "ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ±ÿßÿ®ÿ∑...",
        "not_youtube": "Ÿáÿ∞ÿß ŸÑŸäÿ≥ ÿ±ÿßÿ®ÿ∑Ÿãÿß ŸÖÿØÿπŸàŸÖŸãÿß. Ÿäÿ±ÿ¨Ÿâ ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿßÿ®ÿ∑ YouTube ÿ£Ÿà SoundCloud ÿµÿßŸÑÿ≠.",
        "choose_download_type": "ÿßÿÆÿ™ÿ± ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑÿµŸàÿ™:",
        "audio_button_mp3": "üéµ MP3 (ŸäŸàÿ™ŸäŸàÿ®)",
        "audio_button_sc": "üéµ MP3 (ÿ≥ÿßŸàŸÜÿØ ŸÉŸÑÿßŸàÿØ)",
        "downloading_audio": "ÿ¨ÿßÿ±Ÿä ÿ™ŸÜÿ≤ŸäŸÑ ÿßŸÑÿµŸàÿ™... Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ±.",
        "download_progress": "ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ™ŸÜÿ≤ŸäŸÑ: {percent} ÿ®ÿ≥ÿ±ÿπÿ© {speed}ÿå ŸÖÿ™ÿ®ŸÇŸä ~{eta}",
        "too_big": f"ÿßŸÑŸÖŸÑŸÅ ŸÉÿ®Ÿäÿ± ÿ¨ÿØŸãÿß (>{TELEGRAM_FILE_SIZE_LIMIT_TEXT}). ÿ¨ÿ±ÿ® ŸÅŸäÿØŸäŸà ÿ£Ÿà ŸÖÿ≥ÿßÿ±Ÿãÿß ÿ¢ÿÆÿ±.",
        "done_audio": "ÿ™ŸÖ! ÿ™ŸÖ ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿµŸàÿ™.",
        "error": "ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÖÿß. ÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿ£Ÿà ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ!",
        "error_private_video": "Ÿáÿ∞ÿß ŸÅŸäÿØŸäŸà ÿÆÿßÿµ ŸàŸÑÿß ŸäŸÖŸÉŸÜ ÿ™ŸÜÿ≤ŸäŸÑŸá.",
        "error_video_unavailable": "ÿßŸÑŸÅŸäÿØŸäŸà ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠.",
        "sending_file": "ÿ¨ÿßÿ±Ÿä ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑŸÖŸÑŸÅ {index} ŸÖŸÜ {total}...",
        "cancel_button": "ÿ•ŸÑÿ∫ÿßÿ°",
        "cancelling": "ÿ¨ÿßÿ±Ÿä ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ™ŸÜÿ≤ŸäŸÑ...",
        "cancelled": "ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ™ŸÜÿ≤ŸäŸÑ.",
        "download_in_progress": "ÿ™ŸÜÿ≤ŸäŸÑ ÿ¢ÿÆÿ± ŸÇŸäÿØ ÿßŸÑÿ™ŸÇÿØŸÖ ÿ®ÿßŸÑŸÅÿπŸÑ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßŸÜÿ™ÿ∏ÿßÿ± ÿ£Ÿà ÿ•ŸÑÿ∫ÿßÿ¶Ÿá.",
        "already_cancelled_or_done": "ÿ™ŸÖ ÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ™ŸÜÿ≤ŸäŸÑ ÿ£Ÿà ÿ•ŸÉŸÖÿßŸÑŸá ÿ®ÿßŸÑŸÅÿπŸÑ.",
        "url_error_generic": "ŸÅÿ¥ŸÑ ŸÅŸä ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ±ÿßÿ®ÿ∑. ÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜŸá ÿ±ÿßÿ®ÿ∑ YouTube ÿ£Ÿà SoundCloud ÿµÿßŸÑÿ≠.",
        "search_prompt": (
            "ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÇÿ∑ÿπ ÿßŸÑÿµŸàÿ™Ÿä ÿ£Ÿà ÿßŸÑŸÅŸÜÿßŸÜ. ÿ´ŸÖ ÿßŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâÿå ÿ≥Ÿäÿ™ŸÖ ÿ™ŸÜÿ≤ŸäŸÑŸáÿß ÿ®ÿµŸäÿ∫ÿ© MP3."
            "ÿ£ÿØÿÆŸÑ /cancel ŸÑÿ•ŸÑÿ∫ÿßÿ° ÿßŸÑÿ®ÿ≠ÿ´."
            "ÿ£ÿØÿÆŸÑ /search ŸÑŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ ÿ®ÿßŸÑÿßÿ≥ŸÖ (ŸäŸàÿ™ŸäŸàÿ®)."
        ),
        "searching": "ÿ¨ÿßÿ±Ÿä ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸàÿ≥ŸäŸÇŸâ...",
        "unsupported_url_in_search": "ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿ∫Ÿäÿ± ŸÖÿØÿπŸàŸÖ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿ£Ÿà ÿ™ÿ¨ÿ±ÿ®ÿ© ÿßÿ≥ÿ™ÿπŸÑÿßŸÖ ÿ¢ÿÆÿ±. (ÿ®ÿØŸÑÿßŸã ŸÖŸÜ ÿ∞ŸÑŸÉÿå ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÜÿ¨ÿ≠ ÿßŸÑÿ£ŸÖÿ±ÿå ŸäŸÖŸÉŸÜŸÉ ÿ™ŸÜÿ≤ŸäŸÑ ŸÖŸÇÿ∑ÿπ ÿµŸàÿ™Ÿä ŸÖŸÜ ŸÅŸÜÿßŸÜ ÿ¢ÿÆÿ± ÿ£Ÿà ÿ±ŸäŸÖŸÉÿ≥)",
        "no_results": "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ÿ¥Ÿäÿ°. ÿ≠ÿßŸàŸÑ ÿßÿ≥ÿ™ÿπŸÑÿßŸÖŸãÿß ÿ¢ÿÆÿ±.",
        "choose_track": "ÿ≠ÿØÿØ ŸÖÿ≥ÿßÿ±Ÿãÿß ŸÑÿ™ŸÜÿ≤ŸäŸÑŸá ÿ®ÿµŸäÿ∫ÿ© MP3:",
        "downloading_selected_track": "ÿ¨ÿßÿ±Ÿä ÿ™ŸÜÿ≤ŸäŸÑ ÿßŸÑŸÖÿ≥ÿßÿ± ÿßŸÑŸÖÿ≠ÿØÿØ ÿ®ÿµŸäÿ∫ÿ© MP3...",
        "copyright_pre": " ÿ™ÿ≠ÿ∞Ÿäÿ±! ŸÇÿØ ŸäŸÉŸàŸÜ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ÿßŸÑÿ∞Ÿä ÿ™Ÿàÿ¥ŸÉ ÿπŸÑŸâ ÿ™ŸÜÿ≤ŸäŸÑŸá ŸÖÿ≠ŸÖŸäŸãÿß ÿ®ÿ≠ŸÇŸàŸÇ ÿßŸÑŸÜÿ¥ÿ±. ÿßÿ≥ÿ™ÿÆÿØŸÖŸá ŸÑŸÑÿ£ÿ∫ÿ±ÿßÿ∂ ÿßŸÑÿ¥ÿÆÿµŸäÿ© ŸÅŸÇÿ∑. ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿµÿßÿ≠ÿ® ÿ≠ŸÇŸàŸÇ Ÿàÿ™ÿπÿ™ŸÇÿØ ÿ£ŸÜ ÿ≠ŸÇŸàŸÇŸÉ ŸÖŸÜÿ™ŸáŸÉÿ©ÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ŸàÿßÿµŸÑ ÿπÿ®ÿ± copyrightytdlpbot@gmail.com ŸÑÿ≠ÿ∞ŸÅ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ.",
        "copyright_post": "‚ö†Ô∏è ŸÇÿØ ŸäŸÉŸàŸÜ Ÿáÿ∞ÿß ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ ŸÖÿ≠ŸÖŸäŸãÿß ÿ®ÿ≠ŸÇŸàŸÇ ÿßŸÑŸÜÿ¥ÿ±. ÿßÿ≥ÿ™ÿÆÿØŸÖŸá ŸÑŸÑÿ£ÿ∫ÿ±ÿßÿ∂ ÿßŸÑÿ¥ÿÆÿµŸäÿ© ŸÅŸÇÿ∑. ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿµÿßÿ≠ÿ® ÿ≠ŸÇŸàŸÇ Ÿàÿ™ÿπÿ™ŸÇÿØ ÿ£ŸÜ ÿ≠ŸÇŸàŸÇŸÉ ŸÖŸÜÿ™ŸáŸÉÿ©ÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ŸàÿßÿµŸÑ ÿπÿ®ÿ± copyrightytdlpbot@gmail.com.",
        "copyright_command": "‚ö†Ô∏è ÿ™ÿ≠ÿ∞Ÿäÿ±! ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸàÿßÿØ ÿßŸÑÿ™Ÿä Ÿäÿ™ŸÖ ÿ™ŸÜÿ≤ŸäŸÑŸáÿß ÿπÿ®ÿ± Ÿáÿ∞ÿß ÿßŸÑÿ®Ÿàÿ™ ŸÇÿØ ÿ™ŸÉŸàŸÜ ŸÖÿ≠ŸÖŸäÿ© ÿ®ÿ≠ŸÇŸàŸÇ ÿßŸÑŸÜÿ¥ÿ±. ÿßÿ≥ÿ™ÿÆÿØŸÖŸáÿß ŸÑŸÑÿ£ÿ∫ÿ±ÿßÿ∂ ÿßŸÑÿ¥ÿÆÿµŸäÿ© ŸÅŸÇÿ∑. ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ÿµÿßÿ≠ÿ® ÿ≠ŸÇŸàŸÇ Ÿàÿ™ÿπÿ™ŸÇÿØ ÿ£ŸÜ ÿ≠ŸÇŸàŸÇŸÉ ŸÖŸÜÿ™ŸáŸÉÿ©ÿå Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ŸàÿßÿµŸÑ ÿπÿ®ÿ± copyrightytdlpbot@gmail.com Ÿàÿ≥ŸÜŸÇŸàŸÖ ÿ®ÿ≠ÿ∞ŸÅ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ.",
    },
    "az": {
        "start": (
            "Salam! M…ôn YouTube v…ô SoundCloud-dan s…ôs y√ºkl…ôm…ôk √º√ß√ºn bir botam."
            "YouTube v…ô ya SoundCloud linki (video v…ô ya trek) g√∂nd…ôrin, siz…ô s…ôs y√ºkl…ôm…ô se√ßiml…ôri t…ôklif ed…ôc…ôm."
            f"Botdan istifad…ô etm…ôk √º√ß√ºn {REQUIRED_CHANNEL} kanalƒ±na abun…ô olun."
            "\nüéµ H…ôm√ßinin adla musiqi axtara bil…ôr…ôm! Sad…ôc…ô /search yazƒ±n v…ô trekinizi tapƒ±n."
            "∆èyl…ônin!"
            "Yenilikl…ôr v…ô d…ôst…ôk √º√ß√ºn kanala abun…ô olmaƒüƒ± unutmayƒ±n @ytdlpdeveloper. artoflife2303.github.io/miniblog. "
            "Botun veb versiyasƒ±: youtubemusicdownloader.life, …ôg…ôr i≈ül…ômirs…ô bit.ly/ytmusicload"
        ),
        "choose_lang": "Dil se√ßin:",
        "not_subscribed": f"Botdan istifad…ô etm…ôk √º√ß√ºn z…ôhm…ôt olmasa {REQUIRED_CHANNEL} kanalƒ±na abun…ô olun v…ô yenid…ôn c…ôhd edin.",
        "checking": "Link yoxlanƒ±lƒ±r...",
        "not_youtube": "Bu d…ôst…ôkl…ônm…ôy…ôn bir baƒülantƒ±dƒ±r. Z…ôhm…ôt olmasa, etibarlƒ± bir YouTube v…ô ya SoundCloud linki g√∂nd…ôrin.",
        "choose_download_type": "S…ôs formatƒ±nƒ± se√ßin:",
        "audio_button_mp3": "üéµ MP3 (YouTube)",
        "audio_button_sc": "üéµ MP3 (SoundCloud)",
        "downloading_audio": "S…ôs y√ºkl…ônir... Z…ôhm…ôt olmasa g√∂zl…ôyin.",
        "download_progress": "Y√ºkl…ônir: {percent} s√ºr…ôtl…ô {speed}, qalƒ±b ~{eta}",
        "too_big": f"Fayl √ßox b√∂y√ºkd√ºr (>{TELEGRAM_FILE_SIZE_LIMIT_TEXT}). Ba≈üqa bir video v…ô ya trek sƒ±nayƒ±n.",
        "done_audio": "Hazƒ±rdƒ±r! S…ôs g√∂nd…ôrildi.",
        "error": "N…ôs…ô s…ôhv getdi. Linki yoxlayƒ±n v…ô ya sonra c…ôhd edin!\n",
        "error_private_video": "Bu ≈ü…ôxsi videodur v…ô y√ºkl…ôn…ô bilm…ôz.",
        "error_video_unavailable": "Video m√∂vcud deyil.",
        "sending_file": "{total} fayldan {index}-i g√∂nd…ôrilir...",
        "cancel_button": "L…ôƒüv et",
        "cancelling": "Y√ºkl…ôm…ô l…ôƒüv edilir...",
        "cancelled": "Y√ºkl…ôm…ô l…ôƒüv edildi.",
        "download_in_progress": "Ba≈üqa bir y√ºkl…ôm…ô artƒ±q davam edir. Z…ôhm…ôt olmasa g√∂zl…ôyin v…ô ya l…ôƒüv edin.",
        "already_cancelled_or_done": "Y√ºkl…ôm…ô artƒ±q l…ôƒüv edilib v…ô ya tamamlanƒ±b.",
        "url_error_generic": "URL emal edil…ô bilm…ôdi. Etibarlƒ± bir YouTube v…ô ya SoundCloud linki olduƒüundan …ômin olun.",
        "search_prompt": (
            "Trek adƒ± v…ô ya ifa√ßƒ± adƒ± daxil edin. Sonra musiqiy…ô tƒ±klayƒ±n, MP3 formatƒ±nda y√ºkl…ôn…ôc…ôk.\n"
            "/cancel daxil ed…ôr…ôk axtarƒ±≈üƒ± l…ôƒüv edin.\n"
            "/search daxil ed…ôr…ôk adla musiqi axtarƒ±n (YouTube)."
        ),
        "searching": "Musiqi axtarƒ±lƒ±r...",
        "unsupported_url_in_search": "Link d…ôst…ôkl…ônmir. Z…ôhm…ôt olmasa, linki yoxlayƒ±n v…ô ya ba≈üqa bir sorƒüu sƒ±nayƒ±n. (Alternativ olaraq, …ôg…ôr i≈ül…ôm…ôdis…ô, ba≈üqa bir ifa√ßƒ±dan v…ô ya Remix bir trek y√ºkl…ôy…ô bil…ôrsiniz)",
        "no_results": "He√ß n…ô tapƒ±lmadƒ±. Ba≈üqa bir sorƒüu sƒ±nayƒ±n.",
        "choose_track": "MP3 olaraq y√ºkl…ôm…ôk √º√ß√ºn bir trek se√ßin:",
        "downloading_selected_track": "Se√ßil…ôn trek MP3 olaraq y√ºkl…ônir...",
        "copyright_pre": "‚ö†Ô∏è Diqq…ôt! Y√ºkl…ôdiyiniz material m√º…ôllif h√ºquqlarƒ± il…ô qoruna bil…ôr. Yalnƒ±z ≈ü…ôxsi istifad…ô √º√ß√ºn istifad…ô edin. ∆èg…ôr siz h√ºquq sahibisiniz v…ô h√ºquqlarƒ±nƒ±zƒ±n pozulduƒüunu d√º≈ü√ºn√ºrs…ôns…ô, z…ôhm…ôt olmasa copyrightytdlpbot@gmail.com √ºnvanƒ±na yazƒ±n.",
        "copyright_post": "‚ö†Ô∏è Bu material m√º…ôllif h√ºquqlarƒ± il…ô qoruna bil…ôr. Yalnƒ±z ≈ü…ôxsi istifad…ô √º√ß√ºn istifad…ô edin. ∆èg…ôr siz h√ºquq sahibisiniz v…ô h√ºquqlarƒ±nƒ±zƒ±n pozulduƒüunu d√º≈ü√ºn√ºrs…ô, copyrightytdlpbot@gmail.com √ºnvanƒ±na yazƒ±n.",
        "copyright_command": "‚ö†Ô∏è Diqq…ôt! Bu bot vasit…ôsil…ô y√ºkl…ôn…ôn b√ºt√ºn materiallar m√º…ôllif h√ºquqlarƒ± il…ô qoruna bil…ôr. Yalnƒ±z ≈ü…ôxsi istifad…ô √º√ß√ºn istifad…ô edin. ∆èg…ôr siz h√ºquq sahibisiniz v…ô h√ºquqlarƒ±nƒ±zƒ±n pozulduƒüunu d√º≈ü√ºn√ºrs…ô, copyrightytdlpbot@gmail.com √ºnvanƒ±na yazƒ±n, m√ºvafiq m…ôzmunu sil…ôc…ôyik."
    }
}

def get_user_lang(user_id):
    """
    Determines the user's language by their ID. If no language is found, Russian is used.
    """
    lang = user_langs.get(user_id)
    if lang in LANGUAGES:
        return lang
    return "ru"

def is_soundcloud_url(url):
    """
    Checks if the URL is a SoundCloud link.
    """
    return "soundcloud.com/" in url.lower()

def load_user_langs():
    """
    Loads user language preferences from a file.
    """
    global user_langs
    if os.path.exists(USER_LANGS_FILE):
        with open(USER_LANGS_FILE, 'r', encoding='utf-8') as f:
            try:
                loaded_langs = json.load(f)
                user_langs = {int(k): v for k, v in loaded_langs.items()}
            except json.JSONDecodeError:
                user_langs = {}
    else:
        user_langs = {}

def save_user_langs():
    """
    Saves user language preferences to a file.
    """
    with open(USER_LANGS_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_langs, f)

async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sends the user a keyboard to choose a language.
    """
    logger.info(f"User {update.effective_user.id} requested language choice.")
    await update.message.reply_text(
        LANGUAGES["ru"]["choose_lang"], # Use Russian text by default for language selection.
        reply_markup=LANG_KEYBOARD
    )

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Sets the language for the user and sends a welcome message.
    """
    lang_name = update.message.text
    lang_code = LANG_CODES.get(lang_name)
    user_id = update.effective_user.id
    if lang_code:
        user_langs[user_id] = lang_code
        save_user_langs()
        logger.info(f"User {user_id} set language to {lang_code}.")
        await update.message.reply_text(LANGUAGES[lang_code]["start"])
    else:
        logger.warning(f"User {user_id} sent invalid language: {lang_name}.")
        await update.message.reply_text(
            "Please choose a language from the keyboard."
        )

async def check_subscription(user_id: int, bot) -> bool:
    """
    Checks if the user is subscribed to the required channel.
    """
    try:
        member = await bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        return member.status in ("member", "administrator", "creator")
    except Exception as e:
        logger.error(f"Error checking subscription for user {user_id}: {e}")
        return False

def blocking_yt_dlp_download(ydl_opts, url_to_download):
    """
    Performs download using yt-dlp in blocking mode.
    """
    import yt_dlp.utils
    import logging
    yt_dlp_logger = logging.getLogger("yt_dlp")
    yt_dlp_logger.setLevel(logging.WARNING) # Set logging level for yt-dlp
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url_to_download])
        return True
    except yt_dlp.utils.UnsupportedError:
        raise Exception("Unsupported URL: {}".format(url_to_download))
    except Exception as e:
        logger.error(f"yt-dlp download error: {e}")
        raise # Re-raise all other exceptions

async def ask_download_type(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str):
    """
    Sends a copyright warning and asks the user about the download type (MP3 for YouTube/SoundCloud).
    """
    user_id = update.effective_user.id
    lang = get_user_lang(user_id)
    texts = LANGUAGES[lang]
    # Send copyright warning before format selection
    await update.message.reply_text(texts.get("copyright_pre"))
    context.user_data[f'url_for_download_{user_id}'] = url
    if is_soundcloud_url(url):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(texts["audio_button_sc"], callback_data=f"dltype_audio_sc_{user_id}")]
        ])
    else:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(texts["audio_button_mp3"], callback_data=f"dltype_audio_mp3_{user_id}")]
        ])
    await update.message.reply_text(texts["choose_download_type"], reply_markup=keyboard)

async def handle_download(update_or_query, context: ContextTypes.DEFAULT_TYPE, url: str, texts: dict, user_id: int, download_type: str):
    """
    Handles the download of an audio file from YouTube or SoundCloud.
    """
    if not update_or_query.message:
        try:
            # Send error message if chat_id is not found.
            await context.bot.send_message(chat_id=user_id, text=texts["error"] + " (internal error: chat not found)")
        except Exception:
            pass # Ignore error if message cannot be sent.
        return

    chat_id = update_or_query.message.chat_id
    temp_dir = None
    status_message = None
    active_downloads = context.bot_data.setdefault('active_downloads', {})
    loop = asyncio.get_running_loop()
    cancel_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(texts["cancel_button"], callback_data=f"cancel_{user_id}")]])

    async def update_status_message_async(text_to_update, show_cancel_button=True):
        """
        Updates the status message in the chat.
        """
        nonlocal status_message
        if status_message:
            try:
                current_keyboard = cancel_keyboard if show_cancel_button else None
                await status_message.edit_text(text_to_update, reply_markup=current_keyboard)
            except Exception as e:
                logger.debug(f"Could not edit status message: {e}") # Debug message
                pass # Ignore errors when editing the message.

    def progress_hook(d):
        """
        Progress hook for yt-dlp.
        """
        if d['status'] == 'downloading':
            percent_str = d.get('_percent_str', 'N/A').strip()
            speed_str = d.get('_speed_str', 'N/A').strip()
            eta_str = d.get('_eta_str', 'N/A').strip()
            progress_text = texts["download_progress"].format(percent=percent_str, speed=speed_str, eta=eta_str)
            asyncio.run_coroutine_threadsafe(update_status_message_async(progress_text), loop)

    try:
        status_message = await context.bot.send_message(chat_id=chat_id, text=texts["downloading_audio"], reply_markup=cancel_keyboard)
        temp_dir = tempfile.mkdtemp()
        ydl_opts = {
            'outtmpl': os.path.join(temp_dir, '%(title).140B - Made by @ytdlpload_bot Developed by BitSamurai [%(id)s].%(ext)s'),
            'format': 'bestaudio/best',
            'cookiefile': cookies_path if os.path.exists(cookies_path) else None,
            'progress_hooks': [progress_hook],
            'nocheckcertificate': True,
            'quiet': True,
            'no_warnings': True,
            'ffmpeg_location': ffmpeg_path if FFMPEG_IS_AVAILABLE else None,
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192K',
            }],
            'postprocessor_args': {
                'FFmpegExtractAudio': ['-metadata', 'comment=Made by @ytdlpload_bot']
            },
            'verbose': True # Enable verbose output to see what errors occur.
        }
        # Remove None values from ydl_opts to avoid errors.
        ydl_opts = {k: v for k, v in ydl_opts.items() if v is not None}

        logger.info(f"Starting download for {url} by user {user_id}")
        try:
            await asyncio.to_thread(blocking_yt_dlp_download, ydl_opts, url)
        except Exception as e:
            if 'Unsupported URL' in str(e) or 'unsupported url' in str(e).lower():
                await update_status_message_async("The link is not supported. Please check the link or try another query.", show_cancel_button=False)
                return
            logger.error(f"Error during yt-dlp download for {url}: {e}")
            raise # Re-raise exception after logging.

        downloaded_files_info = []
        all_temp_files = os.listdir(temp_dir)
        for file_name in all_temp_files:
            file_path = os.path.join(temp_dir, file_name)
            file_ext_lower = os.path.splitext(file_name)[1].lower()
            base_title = os.path.splitext(file_name.split(" [")[0])[0] # Extract title from file name.
            if file_ext_lower in [".mp3", ".m4a", ".webm", ".ogg", ".opus", ".aac"]:
                downloaded_files_info.append((file_path, base_title))

        if not downloaded_files_info:
            await update_status_message_async(texts["error"] + " (file not found)", show_cancel_button=False)
            return

        total_files = len(downloaded_files_info)
        for i, (file_to_send, title_str) in enumerate(downloaded_files_info):
            await update_status_message_async(texts["sending_file"].format(index=i+1, total=total_files))
            file_size = os.path.getsize(file_to_send)

            if file_size > TELEGRAM_FILE_SIZE_LIMIT_BYTES:
                await context.bot.send_message(chat_id=chat_id, text=f"{texts['too_big']} ({os.path.basename(file_to_send)})")
                continue

            try:
                with open(file_to_send, 'rb') as f_send:
                    await context.bot.send_audio(
                        chat_id=chat_id, audio=f_send, title=title_str,
                        filename=os.path.basename(file_to_send)
                    )
                # Send copyright message after sending each file
                await context.bot.send_message(chat_id=chat_id, text=texts.get("copyright_post"))
                logger.info(f"Successfully sent audio for {url} to user {user_id}")
            except Exception as e:
                logger.error(f"Error sending audio file {os.path.basename(file_to_send)} to user {user_id}: {e}")
                await context.bot.send_message(chat_id=chat_id, text=f"{texts['error']} (Error sending file {os.path.basename(file_to_send)})")

        await update_status_message_async(texts["done_audio"], show_cancel_button=False)

    except asyncio.CancelledError:
        # Handle download cancellation.
        logger.info(f"Download cancelled for user {user_id}.")
        if status_message:
            await update_status_message_async(texts["cancelled"], show_cancel_button=False)
        else:
            await context.bot.send_message(chat_id=chat_id, text=texts["cancelled"])
    except Exception as e:
        # General error handling for download.
        if 'Unsupported URL' in str(e) or 'unsupported url' in str(e).lower():
            if status_message:
                await update_status_message_async("The link is not supported. Please check the link or try another query.", show_cancel_button=False)
            else:
                await context.bot.send_message(chat_id=chat_id, text="The link is not supported. Please check the link or try another query.")
            return
        logger.critical(f"Unhandled error in handle_download for user {user_id}: {e}", exc_info=True) # Use critical for unhandled errors
        if status_message:
            await update_status_message_async(texts["error"] + str(e), show_cancel_button=False)
        else:
            await context.bot.send_message(chat_id=chat_id, text=texts["error"] + str(e))
    finally:
        # Clean up temporary files and remove active download status.
        if temp_dir and os.path.exists(temp_dir):
            shutil.rmtree(temp_dir, ignore_errors=True)
            logger.info(f"Cleaned up temporary directory {temp_dir} for user {user_id}.")
        if user_id in active_downloads:
            del active_downloads[user_id]
            logger.info(f"Removed active download for user {user_id}.")

async def select_download_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the selection of download type from the Inline keyboard.
    """
    query = update.callback_query
    await query.answer() # Answer CallbackQuery to remove the 'clock' from the button.
    user_id = query.from_user.id
    logger.info(f"User {user_id} selected download type: {query.data}")
    try:
        parts = query.data.split("_")
        if len(parts) != 4 or parts[0] != "dltype" or (parts[1] != "audio"):
            raise ValueError("Incorrect callback_data format for audio")
        specific_format = parts[2]
        user_id_from_callback = int(parts[3])

        if specific_format == "mp3":
            download_type_for_handler = "audio_mp3"
        elif specific_format == "sc":
            download_type_for_handler = "audio_sc"
        else:
            raise ValueError("Unknown download type")

    except (IndexError, ValueError) as e:
        logger.error(f"Error parsing callback_data for user {user_id}: {e} - Data: {query.data}")
        await query.edit_message_text("Selection error. Please try sending the link again.")
        return

    requesting_user_id = query.from_user.id
    if user_id_from_callback != requesting_user_id:
        logger.warning(f"User {requesting_user_id} tried to use another user's callback: {user_id_from_callback}")
        await query.edit_message_text("This button is not for you.")
        return

    lang = get_user_lang(requesting_user_id)
    texts = LANGUAGES[lang]

    # Extract URL for download from user_data.
    url_to_download = context.user_data.pop(f'url_for_download_{requesting_user_id}', None)
    if not url_to_download:
        logger.error(f"URL not found in user_data for user {requesting_user_id}")
        await query.edit_message_text(texts["error"] + " (URL not found, try again)")
        return

    try:
        await query.edit_message_reply_markup(reply_markup=None) # Remove keyboard after selection.
    except Exception as e:
        logger.debug(f"Could not remove reply markup: {e}")
        pass # Ignore errors if keyboard is already removed.

    # Start download in background.
    task = asyncio.create_task(handle_download(query, context, url_to_download, texts, requesting_user_id, download_type_for_handler))
    active_downloads = context.bot_data.setdefault('active_downloads', {})
    active_downloads[requesting_user_id] = {'task': task}

async def search_youtube(query: str):
    """
    Performs a search for videos on YouTube.
    """
    if is_url(query):
        return 'unsupported_url'

    ydl_opts = {
        'quiet': True, # Disable output messages.
        'skip_download': True, # Skip download.
        'extract_flat': True, # Extract only flat info list.
        'nocheckcertificate': True, # Do not check SSL certificates.
        'default_search': None, # Disable default search to control it.
        'noplaylist': True # Do not extract playlists.
    }
    try:
        # Search for top 10 results.
        search_query = f"ytsearch{SEARCH_RESULTS_LIMIT}:{query}"
        logger.info(f"Searching YouTube for query: {query}")
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(search_query, download=False)
            entries = info.get('entries', [])
            if entries is None:
                logger.info(f"No entries found for YouTube search: {query}")
                return [] # Return empty list if entries is None.
            return entries[:SEARCH_RESULTS_LIMIT]
    except yt_dlp.utils.DownloadError as e:
        if 'Unsupported URL' in str(e) or 'unsupported url' in str(e).lower():
            logger.warning(f"Unsupported URL in search query: {query}")
            return 'unsupported_url'
        logger.error(f"DownloadError during YouTube search for {query}: {e}")
        return []
    except Exception as e:
        logger.critical(f"Unhandled error during YouTube search for {query}: {e}", exc_info=True)
        return []

def is_url(text):
    """
    Checks if a string is a YouTube or SoundCloud URL.
    """
    text = text.lower().strip()
    return (
        text.startswith("http://") or text.startswith("https://")
    ) and (
        "youtube.com/" in text or "youtu.be/" in text or "soundcloud.com/" in text
    )

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Starts the music search process.
    """
    user_id = update.effective_user.id
    lang = get_user_lang(user_id)
    texts = LANGUAGES[lang]
    logger.info(f"User {user_id} issued /search command.")
    await update.message.reply_text(texts["search_prompt"])
    context.user_data[f'awaiting_search_query_{user_id}'] = True

async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Processes the user's search query and displays the results.
    """
    user_id = update.effective_user.id
    lang = get_user_lang(user_id)
    texts = LANGUAGES[lang]
    query_text = update.message.text.strip()
    logger.info(f"User {user_id} sent search query: '{query_text}'")

    await update.message.reply_text(texts["searching"])
    results = await search_youtube(query_text)

    if results == 'unsupported_url':
        await update.message.reply_text(texts["unsupported_url_in_search"])
        context.user_data.pop(f'awaiting_search_query_{user_id}', None) # Reset awaiting query flag.
        return

    if not isinstance(results, list): # Check that results is a list.
        results = []

    if not results:
        await update.message.reply_text(texts["no_results"])
        context.user_data.pop(f'awaiting_search_query_{user_id}', None)
        return

    keyboard = []
    for idx, entry in enumerate(results):
        title = entry.get('title', texts["no_results"])
        video_id = entry.get('id')
        keyboard.append([InlineKeyboardButton(f"{idx+1}. {title}", callback_data=f"searchsel_{user_id}_{video_id}")])

    await update.message.reply_text(
        texts["choose_track"],
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    # Save search results for later selection.
    context.user_data[f'search_results_{user_id}'] = {entry.get('id'): entry for entry in results}
    context.user_data.pop(f'awaiting_search_query_{user_id}', None) # Reset awaiting query flag.
    logger.info(f"User {user_id} received {len(results)} search results.")

async def search_select_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the selection of a track from search results.
    """
    query = update.callback_query
    await query.answer() # Answer CallbackQuery to remove the 'clock' from the button.
    user_id = query.from_user.id
    logger.info(f"User {user_id} selected track from search: {query.data}")

    try:
        _, sel_user_id, video_id = query.data.split("_", 2)
        sel_user_id = int(sel_user_id)
    except Exception as e:
        logger.error(f"Error parsing search select callback data for user {user_id}: {e} - Data: {query.data}")
        await query.edit_message_text("Track selection error.")
        return

    if user_id != sel_user_id:
        logger.warning(f"User {user_id} tried to use another user's search select callback: {sel_user_id}")
        await query.edit_message_text("This button is not for you.")
        return

    lang = get_user_lang(user_id)
    texts = LANGUAGES[lang]

    url = f"https://youtu.be/{video_id}" # Form URL from video ID.
    await query.edit_message_text(texts["downloading_selected_track"], reply_markup=None) # Remove keyboard.

    # Start download of selected track.
    task = asyncio.create_task(
        handle_download(query, context, url, texts, user_id, "audio_mp3")
    )
    active_downloads = context.bot_data.setdefault('active_downloads', {})
    active_downloads[user_id] = {'task': task}

async def smart_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Smart message handler: determines if the message is a URL or a search query.
    """
    user_id = update.effective_user.id
    lang = get_user_lang(user_id)
    texts = LANGUAGES[lang]
    text = update.message.text.strip()
    logger.info(f"User {user_id} sent message: '{text}'")

    active_downloads = context.bot_data.setdefault('active_downloads', {})
    if user_id in active_downloads and active_downloads[user_id].get('task') and not active_downloads[user_id]['task'].done():
        await update.message.reply_text(texts["download_in_progress"])
        return

    # Check subscription before any message processing.
    is_subscribed = await check_subscription(user_id, context.bot)
    if not is_subscribed:
        await update.message.reply_text(texts["not_subscribed"])
        return

    if is_url(text):
        await ask_download_type(update, context, text)
    else:
        # If not a URL and the bot is awaiting a search query (e.g., after /search).
        # Check if the bot is awaiting a search query from this user.
        if context.user_data.get(f'awaiting_search_query_{user_id}'):
            await handle_search_query(update, context)
        else:
            # If the user just wrote a word (e.g., Timeless), automatically perform a music search.
            if len(text.split()) <= 5 and text.isascii():
                # Auto-search for short texts (up to 5 words, ASCII)
                logger.info(f"User {user_id} auto-search for: '{text}'")
                await update.message.reply_text(texts["searching"])
                results = await search_youtube(text)
                if not results or results == 'unsupported_url':
                    await update.message.reply_text(texts["no_results"])
                    return
                keyboard = []
                for idx, entry in enumerate(results):
                    title = entry.get('title', texts["no_results"])
                    video_id = entry.get('id')
                    keyboard.append([InlineKeyboardButton(f"{idx+1}. {title}", callback_data=f"searchsel_{user_id}_{video_id}")])
                await update.message.reply_text(
                    texts["choose_track"],
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                context.user_data[f'search_results_{user_id}'] = {entry.get('id'): entry for entry in results}
            else:
                await update.message.reply_text(texts["url_error_generic"])

async def cancel_download_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the request to cancel a download.
    """
    query = update.callback_query
    await query.answer() # Answer CallbackQuery to remove the 'clock' from the button.
    user_id = query.from_user.id
    lang = get_user_lang(user_id)
    texts = LANGUAGES[lang]
    logger.info(f"User {user_id} requested download cancellation.")

    active_downloads = context.bot_data.setdefault('active_downloads', {})
    download = active_downloads.get(user_id)

    if not download or not download.get('task') or download['task'].done():
        try:
            await query.edit_message_text(texts["already_cancelled_or_done"])
        except Exception as e:
            logger.debug(f"Could not edit message for already cancelled/done download: {e}")
            pass # Ignore error if message cannot be edited (e.g., already changed).
        return

    download['task'].cancel() # Cancel active download task.
    try:
        await query.edit_message_text(texts["cancelling"])
    except Exception as e:
        logger.debug(f"Could not edit message to 'cancelling': {e}")
        pass # Ignore error if message cannot be edited.
    logger.info(f"Download task cancelled for user {user_id}.")


async def copyright_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the /copyright command and sends the copyright message.
    """
    user_id = update.effective_user.id
    lang = get_user_lang(user_id)
    texts = LANGUAGES[lang]
    logger.info(f"User {user_id} issued /copyright command.")
    await update.message.reply_text(texts["copyright_command"])

def main():
    """
    Main function to run the bot.
    """
    load_user_langs() # Load user languages at startup.
    
    try:
        app = Application.builder().token(TOKEN).build()
        logger.info("Bot application built successfully.")
    except Exception as e:
        logger.critical(f"Failed to build bot application: {e}", exc_info=True)
        # If an error occurs here, it is critical and execution should stop.
        raise

    # Add command handlers.
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("language", choose_language))
    app.add_handler(CommandHandler("languages", choose_language))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CommandHandler("copyright", copyright_command)) # New /copyright command.

    # Message handler for language selection (by button text).
    app.add_handler(MessageHandler(filters.Regex(f"^({'|'.join(LANG_CODES.keys())})$"), set_language))

    # CallbackQuery handlers for download type selection and search selection.
    app.add_handler(CallbackQueryHandler(select_download_type_callback, pattern="^dltype_"))
    app.add_handler(CallbackQueryHandler(search_select_callback, pattern="^searchsel_"))
    app.add_handler(CallbackQueryHandler(cancel_download_callback, pattern="^cancel_"))

    # Main text message handler (if not a command and not language selection).
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Regex(f"^({'|'.join(LANG_CODES.keys())})$"),
        smart_message_handler
    ))

    async def set_commands(_):
        """
        Sets the bot commands in Telegram. These commands are displayed in the Telegram menu.
        """
        logger.info("Setting bot commands.")
        await app.bot.set_my_commands([
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ / Start and choose language"),
            BotCommand("languages", "–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ / Change language"),
            BotCommand("search", "–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ (YouTube/SoundCloud) / Search music (YouTube/SoundCloud)"), # More universal description
            BotCommand("copyright", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö / Copyright info") # More clear description
        ])
    app.post_init = set_commands # Run set_commands after application initialization.
    
    logger.info("Starting bot polling.")
    try:
        app.run_polling() # Start the bot.
    except Exception as e:
        logger.critical(f"Bot polling failed: {e}", exc_info=True)
        

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    Handles the /start command: prompts to choose a language and sends copyright warning.
    """
    logger.info(f"User {update.effective_user.id} issued /start command.")
    await choose_language(update, context)
    user_id = update.effective_user.id
    lang = get_user_lang(user_id)
    texts = LANGUAGES[lang]
    await update.message.reply_text(texts["copyright_post"])

if __name__ == '__main__':
    main()



# I have written additional lines of codes and "#" in the code for understanding and studying the code.

# Developed and made by BitSamurai.

#Thanks!


# If you have any guestions about how code works & more. Text: copyrightytdlpbot@gmail.com
